name: Release

on:
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: "Version tag (e.g., v0.1.2)"
        required: true

permissions:
  contents: write

jobs:
  release:
    if: github.event_name == 'workflow_dispatch' || 
        (github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'v'))
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version
        id: extract_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_HEAD_REF}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ steps.extract_version.outputs.version }}
          tag_name: ${{ steps.extract_version.outputs.version }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: release
    name: Build and Upload (${{ matrix.os }} â€“ ${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-13
            target: x86_64-apple-darwin
          - os: macos-14
            target: aarch64-apple-darwin

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      # Linux/macOS packaging
      - name: Package binary (Linux/macOS)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          mkdir -p dist pkg
          BIN_NAME="rTimelog"
          BIN_FILE="target/${{ matrix.target }}/release/${BIN_NAME}"
          PKG_NAME="${BIN_NAME}-${{ matrix.target }}.tar.gz"
          cp "$BIN_FILE" pkg/
          cp LICENSE README.md CHANGELOG.md pkg/
          (cd pkg && tar czf "../dist/$PKG_NAME" .)

      # Windows packaging with PowerShell
      - name: Package binary (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $BinName = "rTimelog.exe"
          $TargetDir = "target/${{ matrix.target }}/release"
          $PkgName = "rTimelog-${{ matrix.target }}.zip"
          mkdir dist
          mkdir pkg
          Copy-Item "$TargetDir\$BinName" pkg/
          Copy-Item LICENSE,README.md,CHANGELOG.md pkg/
          Compress-Archive -Path pkg\* -DestinationPath "dist\$PkgName"

      # Linux/macOS: SHA256
      - name: Generate SHA256 checksums (Linux/macOS)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          cd dist
          for file in *; do
            shasum -a 256 "$file" > "$file.sha256"
          done

      # Windows: SHA256
      - name: Generate SHA256 checksums (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Set-Location dist
          Get-ChildItem -File | ForEach-Object {
            $hash = Get-FileHash $_.FullName -Algorithm SHA256
            "$($hash.Hash) *$($_.Name)" | Out-File "$($_.FullName).sha256" -Encoding ASCII
          }

      - name: Import GPG key
        if: env.GPG_PRIVATE_KEY != ''
        run: |
          echo "$GPG_PRIVATE_KEY" | base64 --decode | gpg --batch --import
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Sign archives with GPG
        if: env.GPG_PRIVATE_KEY != ''
        shell: bash
        run: |
          cd dist
          for file in *; do
            echo "$GPG_PASSPHRASE" | gpg --batch --yes --passphrase-fd 0 --armor --detach-sign "$file"
          done
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.release.outputs.version }}
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
