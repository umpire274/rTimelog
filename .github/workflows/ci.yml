name: Build, Package and Release

on:
  workflow_run:
    workflows: [ "Rust Build & Test" ] # Deve corrispondere esattamente al nome del workflow di build/test
    types: [ completed ]

permissions:
  contents: write

jobs:
  build:
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ext: tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            ext: tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            ext: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            ext: zip
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Extract version (Unix)
        if: matrix.os != 'windows-latest'
        id: extract_version_unix
        shell: bash
        run: |
          VERSION=$(grep '^version' Cargo.toml | head -n1 | cut -d '"' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      
      - name: Extract version (Windows)
        if: matrix.os == 'windows-latest'
        id: extract_version_win
        shell: pwsh
        run: |
          $content = Get-Content Cargo.toml
          foreach ($line in $content) {
            if ($line -match '^version\s*=\s*\"(.+?)\"') {
              $VERSION = $matches[1]
              "VERSION=$VERSION" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
              break
            }
          }
      
      - name: Install Rust target
        run: rustup target add ${{ matrix.target }}
      
      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Package binary
        shell: bash
        run: |
          mkdir -p release_artifacts/${{ matrix.target }}
          cd target/${{ matrix.target }}/release
          mkdir -p rtimelog-${{ matrix.target }}
          
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp rtimelog.exe rtimelog-${{ matrix.target }}/
          else
            cp rtimelog rtimelog-${{ matrix.target }}/
          fi
          
          cp $GITHUB_WORKSPACE/{README.md,LICENSE,CHANGELOG.md} rtimelog-${{ matrix.target }}/
          
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            powershell -Command "Compress-Archive -Path rtimelog-${{ matrix.target }}\\* -DestinationPath rtimelog-${VERSION}-${{ matrix.target }}.zip"
            cp rtimelog-${VERSION}-${{ matrix.target }}.zip $GITHUB_WORKSPACE/release_artifacts/${{ matrix.target }}/
          else
            tar -czvf rtimelog-${VERSION}-${{ matrix.target }}.tar.gz rtimelog-${{ matrix.target }}
            cp rtimelog-${VERSION}-${{ matrix.target }}.tar.gz $GITHUB_WORKSPACE/release_artifacts/${{ matrix.target }}/
          fi
      
      - name: Generate SHA256 checksum
        shell: bash
        run: |
          cd release_artifacts/${{ matrix.target }}
          file="rtimelog-${VERSION}-${{ matrix.target }}.${{ matrix.ext }}"
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            pwsh -Command '
              $file = "'"$file"'"
              $hash = (Get-FileHash -Algorithm SHA256 $file).Hash.ToLower()
              "$hash *$file" | Out-File -Encoding utf8 "$file.sha256"
            '
          else
            sha256sum "$file" > "$file.sha256" || shasum -a 256 "$file" > "$file.sha256"
          fi
      
      - name: Sign with GPG
        shell: bash
        run: |
          cd release_artifacts/${{ matrix.target }}
          file="rtimelog-${VERSION}-${{ matrix.target }}.${{ matrix.ext }}"
          echo "$GPG_PRIVATE_KEY" | base64 --decode | gpg --batch --import
          
          echo "$GPG_PASSPHRASE" | gpg --batch --yes --passphrase-fd 0 \
            --pinentry-mode loopback \
            --output "$file.sig" --detach-sign "$file"
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      
      - name: Upload artifact by platform
        uses: actions/upload-artifact@v4
        with:
          name: release_artifacts-${{ matrix.target }}
          path: release_artifacts/${{ matrix.target }}
  
  consolidate:
    name: Consolidate Artifacts
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: release_artifacts-*
          path: temp_download
          merge-multiple: true
      
      - name: Combine into single folder
        shell: bash
        run: |
          mkdir -p release_artifacts
          find temp_download -type f -exec cp {} release_artifacts/ \;
      
      - name: Upload consolidated artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release_artifacts
          path: release_artifacts
  
  release:
    name: Create GitHub Release
    needs: consolidate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download consolidated artifacts
        uses: actions/download-artifact@v4
        with:
          name: release_artifacts
          path: release_artifacts
      
      - name: Extract version from Cargo.toml
        id: extract_version
        run: |
          VERSION=$(grep '^version' Cargo.toml | head -n1 | cut -d '"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.extract_version.outputs.version }}
          name: "v${{ steps.extract_version.outputs.version }}"
          body_path: CHANGELOG.md
          files: |
            release_artifacts/rtimelog-*.tar.gz
            release_artifacts/rtimelog-*.zip
            release_artifacts/rtimelog-*.sig
            release_artifacts/rtimelog-*.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
